<?php
/**
 * @file
 * Code for the ISB Standard feature.
 */

include_once 'isb_standard.features.inc';

/**
 * Implements hook_menu().
 */
function isb_standard_menu() {
  $items['bds/%/version/%'] = array(
    'title callback' => 'isb_standard_title',
    'title arguments' => array('bds', 1,3),
    'page callback' => 'isb_standard_version_view',
    'page arguments' => array('bds', 1,3),
    'access callback' => TRUE,
  );
  $items['cl/%/version/%'] = array(
    'title callback' => 'isb_standard_title',
    'title arguments' => array('cl', 1,3),
    'page callback' => 'isb_standard_version_view',
    'page arguments' => array('cl', 1,3),
    'access callback' => TRUE,
  );
  $items['guidance/%/version/%'] = array(
    'title callback' => 'isb_standard_title',
    'title arguments' => array('guidance', 1,3),
    'page callback' => 'isb_standard_version_view',
    'page arguments' => array('guidance', 1,3),
    'access callback' => TRUE,
  );
  $items['tds/%/version/%'] = array(
    'title callback' => 'isb_standard_title',
    'title arguments' => array('tds', 1,3),
    'page callback' => 'isb_standard_version_view',
    'page arguments' => array('cl', 1,3),
    'access callback' => TRUE,
  );
  return $items;
}

function isb_standard_title($prefix, $alias) {
  $normal = drupal_get_normal_path($prefix . '/' . $alias);
  $parts = explode('/', $normal);
  $node = node_load($parts[1]);
  return $node->title;
}


function isb_standard_version_view($prefix, $alias, $version) {

  $normal = drupal_get_normal_path($prefix . '/' . $alias);
  $parts = explode('/', $normal);
  $nid = $parts[1];

  $vid = db_select('field_revision_field_standard_version', 'sv')
    ->fields('sv', array('revision_id'))
    ->condition('entity_id', $nid)
    ->condition('entity_type', 'node')
    ->condition('field_standard_version_value', $version)
    ->orderBy('revision_id', 'DESC')
    ->execute()
    ->fetchField();

  if ($vid) {
    $node = node_load($nid, $vid);
    drupal_set_title($node->title);
    return node_view($node);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Implements hook_block_info().
 */
function isb_standard_block_info() {
  $blocks = array();
  $blocks['isb_standard_versions'] = array(
    'info' => t('Standard versions'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function isb_standard_block_view($delta='') {
  $block = array();

  switch($delta) {
    case 'isb_standard_versions' :
      $nid = FALSE;
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $nid = arg(1);
        $node = node_load($nid);
        $currently_viewing_version = $node->field_standard_version[LANGUAGE_NONE][0]['value'];
      }
      elseif (in_array(arg(0), array('bds', 'cl', 'guidance', 'tds')) && arg(2) == 'version') {
        $currently_viewing_version  = arg(3);
        $normal = drupal_get_normal_path(arg(0) . '/' . arg(1));
        $parts = explode('/', $normal);
        $nid = $parts[1];
        $node = node_load($nid);
      }

      if ($nid) {
        $versions = db_select('field_revision_field_standard_version', 'sv')
          ->fields('sv', array('field_standard_version_value'))
          ->condition('entity_id', $nid)
          ->condition('entity_type', 'node')
          ->orderBy('revision_id', 'DESC')
          ->distinct()
          ->execute()
          ->fetchCol();

        $standard_base_url = drupal_get_path_alias('node/' . $nid);

        // Don't render this block if there is only one version.
        if(count($versions) > 1) {
          $items = array('items' => array());
          foreach ($versions as $version) {
            if($version == $currently_viewing_version) {
              $items['items'][] = $version . ' (currently viewing)';
            }
            else {
              if ($node->field_standard_version[LANGUAGE_NONE][0]['value'] == $version) {
                $items['items'][] = l($version, $standard_base_url);
              }
              else {
                $items['items'][] = l($version, $standard_base_url . '/version/' . $version);
              }
            }
          }
          $block['subject'] = 'All versions of this standard';
          $block['content'] = theme('item_list', $items);
        }
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_preprocess_node().
 */
function isb_standard_preprocess_node(&$variables) {
  // Set $page to TRUE when viewing other revision via /(bds|cl|guidance|tds)/<alias>/version/<version number>
  // To avoid rendering node title twice.
  if($variables['type'] == 'standard' && arg(2) == 'version') {
    $variables['page'] = TRUE;


    $version = arg(3);
    $nid = $variables['node']->nid;

    $vid = db_select('field_revision_field_standard_version', 'sv')
      ->fields('sv', array('revision_id'))
      ->condition('entity_id', $nid)
      ->condition('entity_type', 'node')
      ->condition('field_standard_version_value', $version)
      ->orderBy('revision_id', 'DESC')
      ->execute()
      ->fetchField();

    $variables['content']['links']['print_html']['#links']['print_html']['href'] = $variables['content']['links']['print_html']['#links']['print_html']['href'] . '/revisions/' . $vid . '/view';
    $variables['content']['links']['print_pdf']['#links']['print_pdf']['href'] = $variables['content']['links']['print_pdf']['#links']['print_pdf']['href'] . '/revisions/' . $vid . '/view';

  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function isb_standard_form_standard_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['css'][] = drupal_get_path('module', 'isb_standard') . '/css/standard_node_add_form.css';
}

/**
 * Implements hook_preprocess_field().
 */
function isb_standard_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] == 'field_controlled_list_values' && isset($variables['element']['#object']->field_controlled_list_labels[LANGUAGE_NONE][0]['value'])) {
    $field_collection_labels = entity_load_single('field_collection_item', $variables['element']['#object']->field_controlled_list_labels[LANGUAGE_NONE][0]['value']);
    if (isset($variables['items'][0]['#header'])) {
      foreach ($variables['items'][0]['#header'] as $id => $column) {
        if (isset($field_collection_labels->{'field_label_' . ($id + 1)}[LANGUAGE_NONE][0]['safe_value'])) {
          $variables['items'][0]['#header'][$id]['data'] = $field_collection_labels->{'field_label_' . ($id + 1)}[LANGUAGE_NONE][0]['safe_value'];
        }
      }
    }
  }

  if ($variables['element']['#field_name'] == 'field_data_definitions_values' && isset($variables['element']['#object']->field_data_definitions_labels[LANGUAGE_NONE][0]['value'])) {
    $field_collection_labels = entity_load_single('field_collection_item', $variables['element']['#object']->field_data_definitions_labels[LANGUAGE_NONE][0]['value']);
    if (isset($variables['items'][0]['#header'])) {
      foreach ($variables['items'][0]['#header'] as $id => $column) {
        if (isset($field_collection_labels->{'field_label_' . ($id + 1)}[LANGUAGE_NONE][0]['safe_value'])) {
          $variables['items'][0]['#header'][$id]['data'] = $field_collection_labels->{'field_label_' . ($id + 1)}[LANGUAGE_NONE][0]['safe_value'];
        }
      }
    }
  }
}

/**
 * Implements hook_token_info().
 */
function isb_standard_token_info() {
  $info['tokens']['node']['field-standard-type-key'] = array(
    'name' => t('Standard Type - key'),
    'description' => t('Key of "field_standard_type" field allowed values.'),
  );
  return $info;
}
/**
 * Implements hook_tokens().
 */
function isb_standard_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'entity' && $data['token_type'] == 'node' && !empty($data['entity'])) {
    $node = $data['entity'];

    foreach ($tokens as $name => $original) {
      switch($name) {
        case 'field-standard-type-key':
          $replacements[$original] = $node->field_standard_type[LANGUAGE_NONE][0]['value'];
          break;
      }
    }
  return $replacements;
  }
}

/**
 * Implements hook_form_alter().
 */
function isb_standard_form_diff_node_revisions_alter(&$form, &$form_state, $form_id) {
  $vids = array_keys($form['info']);
  $nid = $form['nid']['#value'];
  $node = node_load($nid);
  if ($node->type == 'standard') {
    $versions = db_select('field_revision_field_standard_version', 'sv')
      ->fields('sv', array('revision_id', 'field_standard_version_value'))
      ->condition('entity_id', $nid)
      ->condition('entity_type', 'node')
      ->condition('revision_id', $vids, 'IN')
      ->orderBy('revision_id', 'DESC')
      ->execute()
      ->fetchAllKeyed();

    $versions_used = array();
    foreach ($versions as $vid => $version) {
      if (in_array($version, $versions_used)) {
        $form['versions'][$vid] = array('#markup' => $version);
      }
      else {
        $form['versions'][$vid] = array('#markup' => '<strong>' . $version . '<strong>');
        $versions_used[] = $version;
      }
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function isb_standard_theme_registry_alter(&$theme_registry) {
  $theme_registry['diff_node_revisions']['file'] = 'isb_standard.module';
  $theme_registry['diff_node_revisions']['theme path'] = 'profiles/isb/modules/features/isb_standard';
  $theme_registry['diff_node_revisions']['function'] = 'theme_isb_standard_node_revisions';
  unset($theme_registry['diff_node_revisions']['includes']);
}

/**
 * Theme function to display the revisions with standard versions.
 */
function theme_isb_standard_node_revisions($vars) {
  $form = $vars['form'];
  $output = '';

  // Overview table:
  $header = array(
    t('Revision'),
    t('Version'),
    array('data' => drupal_render($form['submit']), 'colspan' => 2),
    array('data' => t('Operations'), 'colspan' => 2),
  );

  if (empty($form['versions'])) {
    unset($header[1]); // Version
  }

  if (isset($form['info']) && is_array($form['info'])) {
    foreach (element_children($form['info']) as $key) {
      $row = array();
      if (isset($form['operations'][$key][0])) {
        // Note: even if the commands for revert and delete are not permitted,
        // the array is not empty since we set a dummy in this case.
        $row[] = drupal_render($form['info'][$key]);
        if (isset($form['versions'])) {
          $row[] = drupal_render($form['versions'][$key]);
        }
        $row[] = drupal_render($form['diff']['old'][$key]);
        $row[] = drupal_render($form['diff']['new'][$key]);
        $row[] = drupal_render($form['operations'][$key][0]);
        $row[] = drupal_render($form['operations'][$key][1]);
        $rows[] = array(
          'data' => $row,
          'class' => array('diff-revision'),
        );
      }
      else {
        // The current revision (no commands to revert or delete).
        $row[] = array(
          'data' => drupal_render($form['info'][$key]),
          'class' => array('revision-current'),
        );
        if (isset($form['versions'])) {
          $row[] = array(
            'data' => drupal_render($form['versions'][$key]),
            'class' => array('version'),
          );
        }
        $row[] = array(
          'data' => drupal_render($form['diff']['old'][$key]),
          'class' => array('revision-current'),
        );
        $row[] = array(
          'data' => drupal_render($form['diff']['new'][$key]),
          'class' => array('revision-current'),
        );
        $row[] = array(
          'data' => t('current revision'),
          'class' => array('revision-current'),
          'colspan' => '2',
        );
        $rows[] = array(
          'data' => $row,
          'class' => array('error diff-revision'),
        );
      }
    }
  }
  $output .= theme('table__diff__revisions', array(
    'header' => $header,
    'rows' => $rows,
    'sticky' => FALSE,
    'attributes' => array('class' => 'diff-revisions'),
  ));

  $output .= drupal_render_children($form);
  return $output;
}