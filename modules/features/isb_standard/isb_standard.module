<?php
/**
 * @file
 * Code for the ISB Standard feature.
 */

include_once 'isb_standard.features.inc';

/**
 * Implements hook_menu().
 */
function isb_standard_menu() {
  $items['bds/%/version/%'] = array(
    'title callback' => 'isb_standard_title',
    'title arguments' => array('bds', 1,3),
    'page callback' => 'isb_standard_version_view',
    'page arguments' => array('bds', 1,3),
    'access callback' => TRUE,
  );
  $items['cl/%/version/%'] = array(
    'title callback' => 'isb_standard_title',
    'title arguments' => array('cl', 1,3),
    'page callback' => 'isb_standard_version_view',
    'page arguments' => array('cl', 1,3),
    'access callback' => TRUE,
  );
  $items['guidance/%/version/%'] = array(
    'title callback' => 'isb_standard_title',
    'title arguments' => array('guidance', 1,3),
    'page callback' => 'isb_standard_version_view',
    'page arguments' => array('guidance', 1,3),
    'access callback' => TRUE,
  );
  $items['tds/%/version/%'] = array(
    'title callback' => 'isb_standard_title',
    'title arguments' => array('tds', 1,3),
    'page callback' => 'isb_standard_version_view',
    'page arguments' => array('cl', 1,3),
    'access callback' => TRUE,
  );
  return $items;
}

function isb_standard_title($prefix, $alias) {
  $normal = drupal_get_normal_path($prefix . '/' . $alias);
  $parts = explode('/', $normal);
  $node = node_load($parts[1]);
  return $node->title;
}


function isb_standard_version_view($prefix, $alias, $version) {

  $normal = drupal_get_normal_path($prefix . '/' . $alias);
  $parts = explode('/', $normal);
  $nid = $parts[1];

  $vid = db_select('field_revision_field_standard_version', 'sv')
    ->fields('sv', array('revision_id'))
    ->condition('entity_id', $nid)
    ->condition('entity_type', 'node')
    ->condition('field_standard_version_value', $version)
    ->orderBy('revision_id', 'DESC')
    ->execute()
    ->fetchField();

  if ($vid) {
    $node = node_load($nid, $vid);
    drupal_set_title($node->title);
    return node_view($node);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Implements hook_block_info().
 */
function isb_standard_block_info() {
  $blocks = array();
  $blocks['isb_standard_versions'] = array(
    'info' => t('Standard versions'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function isb_standard_block_view($delta='') {
  $block = array();

  switch($delta) {
    case 'isb_standard_versions' :
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $nid = arg(1);
        $node = node_load($nid);
        $currently_viewing_version = $node->field_standard_version[LANGUAGE_NONE][0]['value'];
      }
      elseif (in_array(arg(0), array('bds', 'cl', 'guidance', 'tds')) && arg(2) == 'version') {
        $currently_viewing_version  = arg(3);
        $normal = drupal_get_normal_path(arg(0) . '/' . arg(1));
        $parts = explode('/', $normal);
        $nid = $parts[1];
        $node = node_load($nid);
      }

      $versions = db_select('field_revision_field_standard_version', 'sv')
        ->fields('sv', array('field_standard_version_value'))
        ->condition('entity_id', $nid)
        ->condition('entity_type', 'node')
        ->orderBy('revision_id', 'DESC')
        ->distinct()
        ->execute()
        ->fetchCol();

      $standard_base_url = drupal_get_path_alias('node/' . $nid);

      // Don't render this block if there is only one version.
      if(count($versions) > 1) {
        $items = array('items' => array());
        foreach ($versions as $version) {
          if($version == $currently_viewing_version) {
            $items['items'][] = $version . ' (currently viewing)';
          }
          else {
            if ($node->field_standard_version[LANGUAGE_NONE][0]['value'] == $version) {
              $items['items'][] = l($version, $standard_base_url);
            }
            else {
              $items['items'][] = l($version, $standard_base_url . '/version/' . $version);
            }
          }
        }

      }

      $block['subject'] = 'All versions of this standard';
      $block['content'] = theme('item_list', $items);;
      break;
  }
  return $block;
}

/**
 * Implements hook_preprocess_node().
 */
function isb_standard_preprocess_node(&$variables) {
  // Set $page to TRUE when viewing other revision via /(bds|cl|guidance|tds)/<alias>/version/<version number>
  // To avoid rendering node title twice.
  if($variables['type'] == 'standard' && arg(2) == 'version') {
    $variables['page'] = TRUE;
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function isb_standard_form_standard_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['css'][] = drupal_get_path('module', 'isb_standard') . '/css/standard_node_add_form.css';
}

/**
 * Implements hook_preprocess_field().
 */
function isb_standard_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] == 'field_controlled_list_values' && isset($variables['element']['#object']->field_controlled_list_labels[LANGUAGE_NONE][0]['value'])) {
    $field_collection_labels = entity_load_single('field_collection_item', $variables['element']['#object']->field_controlled_list_labels[LANGUAGE_NONE][0]['value']);
    if (isset($variables['items'][0]['#rows'])) {
      foreach ($variables['items'][0]['#rows'] as $id => $row) {
        if (isset($field_collection_labels->{'field_label_' . ($id + 1)}[LANGUAGE_NONE][0]['safe_value'])) {
          $variables['items'][0]['#header'][$id]['data'] = $field_collection_labels->{'field_label_' . ($id + 1)}[LANGUAGE_NONE][0]['safe_value'];
        }
      }
    }
  }
}

/**
 * Implements hook_token_info().
 */
function isb_standard_token_info() {
  $info['tokens']['node']['field-standard-type-key'] = array(
    'name' => t('Standard Type - key'),
    'description' => t('Key of "field_standard_type" field allowed values.'),
  );
  return $info;
}
/**
 * Implements hook_tokens().
 */
function isb_standard_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'entity' && $data['token_type'] == 'node' && !empty($data['entity'])) {
    $node = $data['entity'];

    foreach ($tokens as $name => $original) {
      switch($name) {
        case 'field-standard-type-key':
          $replacements[$original] = $node->field_standard_type[LANGUAGE_NONE][0]['value'];
          break;
      }
    }
  return $replacements;
  }
}